openapi: 3.0.3
info:
  title: {{ cookiecutter.project_name }} API Docs
  version: v1
servers:
  - url: 'http://{{ cookiecutter.flask_host }}:{{ cookiecutter.flask_port }}/'
tags:
  - name: Health check
  - name: Auth
  - name: User
paths:
  /healthcheck:
    get:
      tags:
        - Health check
      summary: "Just to check if service is up"
      responses:
        '200':
          description: Successful Health Check

  /api/users/:
    post:
      tags:
        - User
      summary: "Create user"
      requestBody:
        required: true
        description: |
          Creates a new user if there is no user with the same username. </br> </br>
          Takes username, password and avatar_url(optional, default - ' ') as a request body.
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
                avatar_url:
                  type: string
                  minLength: 1
            examples:
              'Valid sign up':
                description: Creates a user with these username, password and avatar url.
                value:
                  username: htmlprogrammer
                  password: CoolPass
                  avatar_url: http://myphoto.com
      responses:
        '200':
          description: Successful user creation
          content:
            application/json:
              example:
                username: "htmlprogrammer"
                avatar_url: "http://myphoto.com"
                date_created: "2020-12-03 12:47:36.147214"
                message: "User htmlprogrammer was created"

        "400":
          description: User already exists
          content:
            application/json:
              example:
                message: 'user already exists.'
    get:
      tags:
        - User
      summary: "Get user list"
      responses:
        '200':
          description: Successful user creation
          content:
            application/json:
              example:
                [{
                "username": "htmlprogrammer",
                "avatar": "http://myphoto.com",
                "created": "2020-12-03 12:47:36.147214",
                "active": True
                },
                {
                "username": "cat",
                "avatar": "http://catpics.com",
                "created": "2007-12-03 12:47:36.147214",
                "active": False
                }
                ]
      security:
        - bearerAuth: [ ]

  /api/login:
    post:
      tags:
        - Auth
      summary: 'Get access and refresh tokens'
      requestBody:
        required: true
        description: "Returns message, Access token and Refresh token."
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
            examples:
              'Valid login':
                description: Login user
                value:
                  username: htmlprogrammer
                  password: CoolPass
      responses:
        "200":
          description: Successful login
            Returns message, `AccessToken` and `RefreshToken`.
          content:
            application/json:
              example:
                message: Logged in as htmlprogrammer
                access_token: some_huge_string
                refresh_token: also_some_huge_string
        '401':
          description: Wrong password.
          content:
            application/json:
              example:
                message: Wrong password
        '404':
          description: User does not exist.
          content:
            application/json:
              example:
                message: User htmlprogrammer doesn't exist


  /api/refresh:
    get:
      tags:
        - Auth
      summary: "Refresh access token"
      description: "Operation requires authorization header (Bearer)"
      responses:
        "200":
          description: Successful Operation
            Returns new `access_token`.
          content:
            application/json:
              example:
                access_token: some.long.string

        '401':
          description: Authorization header is missing.
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"

        '422':
          description: Broken refresh token.
          content:
            application/json:
              example:
                msg: "Not enough segments"
      security:
        - bearerAuth: []


  /api/users/{username}:
    get:
      tags:
        - User
      summary: Get info about user
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: String username
      responses:
        '200':
          description:  Successful Operation
          content:
            application/json:
              example:
                "username": htmlprogrammer
                "date_created": 2020-12-03_12:47:36.147214
                "avatar_url": http://myphoto.com
                "password": somepassword
                "active": true
        '404':
          description:  User is not in the database
          content:
            application/json:
              example:
                "message": The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
      security:
        - bearerAuth: [ ]
    put:
      tags:
        - User
      summary: Update user`s avatar_url
      requestBody:
        required: true
        description: Updates user`s avatar_url
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - avatar_url
              properties:
                avatar_url:
                  type: string
                  minLength: 1
            examples:
              'Valid update':
                description: Updates user`s avatar url.
                value:
                  avatar_url: http://myphoto2.com
              'Invalid update':
                description: Returns 400 statusCode.
                value:
                  avatar_url: ''
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: String username

      responses:
        '200':
          description:  Successful Operation
          content:
            application/json:
              example:
                "username": htmlprogrammer
                "date_created": 2020-12-03_12:47:36.147214
                "avatar_url": http://myphoto2.com
                "active": true
        '400':
          description:  Bad request
          content:
            application/json:
              example:
                "message": New avatar url is empty

        '404':
          description:  User is not in the database
          content:
            application/json:
              example:
                "message": The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - User
      summary: Delete user (update active to False).
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: String username

      responses:
        '200':
          description:  Successful Operation, user status updated
          content:
            application/json:
              example:
                "username": htmlprogrammer
                "active": true
                "date_created": 2020-12-03_12:47:36.147214
        '500':
          description:  Bad request
          content:
            application/json:
              example:
                "message": Something went wrong

        '404':
          description:  User is not in the database
          content:
            application/json:
              example:
                "message": User not found
      security:
        - bearerAuth: [ ]

  /api/change_password:
    put:
      tags:
        - User
      summary: Update user`s password
      requestBody:
        required: true
        description: Updates current user`s password
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - old_password
                - new_password
                - confirmation_password
              properties:
                old_password:
                  type: string
                  minLength: 1
                new_password:
                  type: string
                  minLength: 1
                confirmation_password:
                  type: string
                  minLength: 1
            examples:
              'Valid update':
                description: Updates user`s password.
                value:
                  old_password: SomePass
                  new_password: NewPass
                  confirmation_password: NewPass

              'Invalid update':
                description: Returns 400 statusCode.
                value:
                  old_password: SomePass
                  new_password: NewPass
                  confirmation_password: NotMatching

      responses:
        '200':
          description:  Successful Operation
          content:
            application/json:
              example:
                username: htmlprogrammer,
                message: Password updated successfully
        '400':
          description:  Bad request
          content:
            application/json:
              example:
                "message": New password doesn't match with confirmation password.
        '422':
          description: Bad token header
          content:
            application/json:
              example:
                "msg": "Not enough segments"

        '401':
          description:  Unauthorized
          content:
            application/json:
              example:
                "msg": "Missing Authorization Header"
      security:
        - bearerAuth: []
  /api/logout_access:
    post:
      tags:
        - Auth
      summary: Log user out using AccesToken. (throws token to blacklist)
      responses:
        '200':
          description:  Successful Operation
          content:
            application/json:
              example:
                "message": Access token has been revoked successfully
        '401':
          description: Expired access token.
          content:
            application/json:
              example:
                msg: "Expired access token"

        '422':
          description: Broken access token.
          content:
            application/json:
              example:
                msg: "Not enough segments"
        '500':
          description: Server error.
          content:
            application/json:
              example:
                "message": "Something went wrong while revoking token"
      security:
        - bearerAuth: []

  /api/logout_refresh:
    post:
      tags:
        - Auth
      summary: Log user out using RefreshToken. (throws token to blacklist)
      responses:
        '200':
          description:  Successful Operation
          content:
            application/json:
              example:
                "message": Refresh token has been revoked successfully

        '401':
          description: Expired refresh token.
          content:
            application/json:
              example:
                msg: "Expired refresh token"

        '422':
          description: Broken refresh token.
          content:
            application/json:
              example:
                msg: "Not enough segments"
        '500':
          description: Server error.
          content:
            application/json:
              example:
                "message": "Something went wrong while revoking token"
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
